TrajectoryActionBuilder tab1 = drive.actionBuilder(initialPose)
                .lineToY(-32);


7.76s        TrajectoryActionBuilder tab2 = drive.actionBuilder(new Pose2d(7, -32,Math.PI/2 ))
                .strafeTo(new Vector2d(24,-34))
                .splineToConstantHeading(new Vector2d(38,-10),Math.PI/2)
                .strafeTo(new Vector2d(48,-10))
                .lineToY( -50)
                .lineToY( -40)
                .turn(Math.PI);
                //.forward(15)
                //.lineToLinearHeading(new Pose2d(9,-35,Math.PI/2))




splineTo - Vector2d(), angle
splineToConstantHeading - Vector2d(), angle
splineToLinearHeading - Pose2d(x,y,heading), final spline angle
splineToSplineHeading - Pose2d(x,y,heading), final spline angle (final angle affets shape of path)


TrajectorySequence trajectory0 = drive.trajectorySequenceBuilder(new Pose2d(-37.68, 33.21, Math.toRadians(90.00)))
.splineTo(new Vector2d(4.98, 34.83), Math.toRadians(270.00))
.build();


8.85s				.setTangent(-Math.PI/2)
                                .splineToSplineHeading(new Pose2d(35,-31,Math.PI/2),Math.PI/2)
                                .splineToSplineHeading(new Pose2d(35,-21,Math.PI/2),Math.PI/2)
                                .splineToSplineHeading(new Pose2d(47,-11, Math.PI/2),-Math.PI/2)
                                .splineToSplineHeading(new Pose2d(47,-48,Math.PI/2),-Math.PI/2)
                                .splineToSplineHeading(new Pose2d(47,-36, Math.PI/2),-Math.PI/2)
                                .turn(Math.PI)
                                .build());

6.18s                           .setTangent(-Math.PI/2)
                                .splineToConstantHeading(new Vector2d(35,-31),Math.PI/2)
                                .splineToSplineHeading(new Pose2d(35,-21,Math.PI/2),Math.PI/2)
                                .splineToConstantHeading(new Vector2d(47,-11),-Math.PI/2)
                                .splineToSplineHeading(new Pose2d(47,-48,Math.PI/2),-Math.PI/2)
                                .splineToSplineHeading(new Pose2d(47,-36, Math.PI/2),-Math.PI/2)
                                .turn(Math.PI)
                                .build());

5.92s				.setTangent(-Math.PI/2)
                                .splineToConstantHeading(new Vector2d(35,-31),Math.PI/2)
                                .splineToConstantHeading(new Vector2d(35,-21),Math.PI/2)
                                .splineToConstantHeading(new Vector2d(47,-11),-Math.PI/2)
                                .splineToConstantHeading(new Vector2d(47,-46),-Math.PI/2)
                                .splineToConstantHeading(new Vector2d(47,-40),-Math.PI/2)
                                .turn(Math.PI)
                                .build());



5.01s                        .setTangent(-Math.PI/2)
                        .splineToSplineHeading(new Pose2d(35,-31,-Math.PI/2),Math.PI/2)
                        .splineToConstantHeading(new Vector2d(35,-21),Math.PI/2)
                        .splineToConstantHeading(new Vector2d(47,-11),-Math.PI/2)
                        .splineToConstantHeading(new Vector2d(47,-46),-Math.PI/2)
                        .splineToConstantHeading(new Vector2d(47,-40),-Math.PI/2)
                        .build());

repositories {
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://maven.brott.dev/' }
}

dependencies {
    implementation 'com.github.rh-robotics:MeepMeep:v1.1.0'
}